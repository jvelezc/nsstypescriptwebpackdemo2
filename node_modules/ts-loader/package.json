{
  "_args": [
    [
      {
        "raw": "ts-loader",
        "scope": null,
        "escapedName": "ts-loader",
        "name": "ts-loader",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\WebPack"
    ]
  ],
  "_from": "ts-loader@latest",
  "_id": "ts-loader@2.1.0",
  "_inCache": true,
  "_location": "/ts-loader",
  "_nodeVersion": "7.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/ts-loader-2.1.0.tgz_1495390301980_0.6744769075885415"
  },
  "_npmUser": {
    "name": "johnnyreilly",
    "email": "johnny_reilly@hotmail.com"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ts-loader",
    "scope": null,
    "escapedName": "ts-loader",
    "name": "ts-loader",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/ts-loader/-/ts-loader-2.1.0.tgz",
  "_shasum": "5a8efcc5c72c06fc49d69bad69c85617c6194f77",
  "_shrinkwrap": null,
  "_spec": "ts-loader",
  "_where": "C:\\WebPack",
  "author": {
    "name": "James Brantly",
    "email": "james@jbrantly.com",
    "url": "http://www.jbrantly.com/"
  },
  "bugs": {
    "url": "https://github.com/TypeStrong/ts-loader/issues"
  },
  "dependencies": {
    "colors": "^1.0.3",
    "enhanced-resolve": "^3.0.0",
    "loader-utils": "^1.0.2",
    "semver": "^5.0.1"
  },
  "description": "TypeScript loader for webpack",
  "devDependencies": {
    "babel": "^6.0.0",
    "babel-core": "^6.0.0",
    "babel-loader": "^7.0.0",
    "babel-polyfill": "^6.16.0",
    "babel-preset-es2015": "^6.0.0",
    "babel-preset-es2016": "^6.16.0",
    "babel-preset-react": "^6.0.0",
    "escape-string-regexp": "^1.0.3",
    "fs-extra": "^3.0.0",
    "glob": "^7.1.1",
    "happypack": "^3.1.0",
    "html-webpack-plugin": "^2.17.0",
    "jasmine-core": "^2.5.2",
    "karma": "^1.3.0",
    "karma-jasmine": "^1.0.0",
    "karma-mocha-reporter": "^2.0.0",
    "karma-phantomjs-launcher": "^1.0.0",
    "karma-sourcemap-loader": "^0.3.6",
    "karma-webpack": "^2.0.1",
    "mkdirp": "^0.5.1",
    "mocha": "^3.1.0",
    "phantomjs-prebuilt": "^2.1.2",
    "rimraf": "^2.4.2",
    "typescript": "^2.2.1",
    "typings": "^2.0.0",
    "webpack": "^2.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "5a8efcc5c72c06fc49d69bad69c85617c6194f77",
    "tarball": "https://registry.npmjs.org/ts-loader/-/ts-loader-2.1.0.tgz"
  },
  "engines": {
    "node": ">=4.3.0 <5.0.0 || >=5.10"
  },
  "gitHead": "bb9f1e037b8ca1af1c0d14d58c642c422c3fc633",
  "homepage": "https://github.com/TypeStrong/ts-loader",
  "keywords": [
    "ts-loader",
    "typescript-loader",
    "webpack",
    "loader",
    "typescript",
    "ts"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "blakeembrey",
      "email": "hello@blakeembrey.com"
    },
    {
      "name": "jbrantly",
      "email": "james@jbrantly.com"
    },
    {
      "name": "johnnyreilly",
      "email": "johnny_reilly@hotmail.com"
    }
  ],
  "name": "ts-loader",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/TypeStrong/ts-loader.svg?branch=master)](https://travis-ci.org/TypeStrong/ts-loader)\r\n[![Build Status](https://ci.appveyor.com/api/projects/status/bjh0r0d4ckspgkh9/branch/master?svg=true)](https://ci.appveyor.com/project/JohnReilly/ts-loader/branch/master)\r\n[![Downloads](http://img.shields.io/npm/dm/ts-loader.svg)](https://npmjs.org/package/ts-loader)\r\n[![Join the chat at https://gitter.im/TypeStrong/ts-loader](https://img.shields.io/badge/gitter-join%20chat-brightgreen.svg)](https://gitter.im/TypeStrong/ts-loader)\r\n\r\n# TypeScript loader for webpack\r\n\r\n[![Greenkeeper badge](https://badges.greenkeeper.io/TypeStrong/ts-loader.svg)](https://greenkeeper.io/)\r\n\r\nThis is the typescript loader for webpack.\r\n\r\n## Getting Started\r\n\r\nTake a look at our [examples](examples/).  You can also find some older tutorials and examples [here](https://github.com/TypeStrong/ts-loader/wiki/Tutorials-&-Examples).\r\n\r\n### Compatibility\r\n\r\n#### TypeScript\r\n\r\nts-loader supports the latest and greatest version of TypeScript right back to v1.6.  \r\n\r\nA full test suite runs each night (and on each pull request). It runs both on [Linux](https://travis-ci.org/TypeStrong/ts-loader) and [Windows](https://ci.appveyor.com/project/JohnReilly/ts-loader), testing ts-loader against each major release of TypeScript from the latest right back to 1.6.  The test suite also runs against TypeScript@next (because we want to use it as much as you do).\r\n\r\nIf you become aware of issues not caught by the test suite then please let us know. Better yet, write a test and submit it in a PR!\r\n\r\n#### Webpack\r\n\r\nts-loader targets webpack 2.  It may well still work with webpack 1 but it does not officially support webpack 1 any longer.  Our continuous integration test suites run against webpack 2; **not** webpack 1. \r\n\r\n#### `LoaderOptionsPlugin`\r\n\r\n[There's a known \"gotcha\"](https://github.com/TypeStrong/ts-loader/issues/283) if you are using webpack 2 with the `LoaderOptionsPlugin`.  If you are faced with the `Cannot read property 'unsafeCache' of undefined` error then you probably need to supply a `resolve` object as below: (Thanks @jeffijoe!)\r\n \t\t\r\n ```js\t\t\r\n new LoaderOptionsPlugin({\t\t\r\n   debug: false,\t\t\r\n   options: {\t\t\r\n     resolve: {\r\n       extensions: ['.ts', '.tsx', '.js']\r\n     }\t\r\n   }\t\t\r\n })\t\t\r\n ```\r\n\r\nIt's worth noting that use of the `LoaderOptionsPlugin` is [only supposed to be a stopgap measure](https://webpack.js.org/plugins/loader-options-plugin/).  You may want to look at removing it entirely.\r\n\r\n### Babel\r\n\r\nts-loader works very well in combination with [babel](https://babeljs.io/) and [babel-loader](https://github.com/babel/babel-loader).  To see an example of this in practice take a look at the [example](https://github.com/Microsoft/TypeScriptSamples/tree/master/react-flux-babel-karma) in the official [TypeScript Samples](https://github.com/Microsoft/TypeScriptSamples).\r\n\r\nAlternatively take a look at this [webpack 2 example](examples/react-babel-karma-gulp).\r\n\r\n### Contributing\r\n\r\nThis is your TypeScript loader! We want you to help make it even better. Please feel free to contribute; see the [contributor's guide](CONTRIBUTING.md) to get started.\r\n\r\n### Installation\r\n\r\n```\r\nnpm install ts-loader\r\n```\r\n\r\nYou will also need to install TypeScript if you have not already.\r\n\r\n```\r\nnpm install typescript\r\n```\r\n\r\nor if you want to install TypeScript globally\r\n\r\n```\r\nnpm install typescript -g\r\nnpm link typescript\r\n```\r\n\r\n### Running\r\n\r\nUse webpack like normal, including `webpack --watch` and `webpack-dev-server`, or through another\r\nbuild system using the [Node.js API](http://webpack.github.io/docs/node.js-api.html).\r\n\r\n### Configuration\r\n\r\n1. Create or update `webpack.config.js` like so:\r\n\r\n    ```javascript\r\n    module.exports = {\r\n      entry: './app.ts',\r\n      output: {\r\n        filename: 'bundle.js'\r\n      },\r\n      resolve: {\r\n        // Add `.ts` and `.tsx` as a resolvable extension.\r\n        extensions: ['.ts', '.tsx', '.js'] // note if using webpack 1 you'd also need a '' in the array as well\r\n      },\r\n      module: {\r\n        loaders: [ // loaders will work with webpack 1 or 2; but will be renamed \"rules\" in future\r\n          // all files with a `.ts` or `.tsx` extension will be handled by `ts-loader`\r\n          { test: /\\.tsx?$/, loader: 'ts-loader' }\r\n        ]\r\n      }\r\n    }\r\n    ```\r\n\r\n2. Add a [`tsconfig.json`](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html) file. (The one below is super simple; but you can tweak this to your hearts desire)\r\n\r\n    ```json\r\n    {\r\n      \"compilerOptions\": {\r\n      }\r\n    }\r\n    ```\r\n\r\nThe [tsconfig.json](http://www.typescriptlang.org/docs/handbook/tsconfig-json.html) file controls\r\nTypeScript-related options so that your IDE, the `tsc` command, and this loader all share the\r\nsame options.\r\n\r\n### Failing the build on TypeScript compilation error\r\n\r\nWhen the build fails (i.e. at least one typescript compile error occured), ts-loader does **not** propagate the build failure to webpack.  The upshot of this is you can fail to notice an erroring build. This is inconvenient; particularly in continuous integration scenarios.  If you want to ensure that the build failure is propogated it is advised that you make use of the [webpack-fail-plugin](https://www.npmjs.com/package/webpack-fail-plugin).  This plugin that will make the process return status code 1 when it finishes with errors in single-run mode. Et voil√†! Build failure.\r\n\r\nFor more background have a read of [this issue](https://github.com/TypeStrong/ts-loader/issues/108).\r\n\r\n#### Options\r\n\r\nThere are two types of options: TypeScript options (aka \"compiler options\") and loader options. TypeScript options should be set using a tsconfig.json file. Loader options can be set either using a query when specifying the loader or through the `options` property in the webpack configuration:\r\n\r\n```javascript\r\nmodule.exports = {\r\n  ...\r\n  module: {\r\n    rules: [\r\n      { \r\n        test: /\\.tsx?$/, \r\n        loader: 'ts-loader', \r\n        options: {\r\n          transpileOnly: true\r\n        } \r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nAlternatively this can be configured using a query:\r\n\r\n```javascript\r\nmodule.exports = {\r\n  ...\r\n  module: {\r\n    loaders: [\r\n      // specify option using query\r\n      { \r\n        test: /\\.tsx?$/,\r\n        loader: 'ts-loader?' + JSON.stringify({\r\n          transpileOnly: true\r\n        }) }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nFor a full breakdown of the power of query syntax have a read of [this](https://github.com/webpack/loader-utils#getoptions).\r\n\r\n#### Available Options\r\n\r\n##### transpileOnly *(boolean) (default=false)*\r\n\r\nIf you want to speed up compilation significantly you can set this flag.\r\nHowever, many of the benefits you get from static type checking between\r\ndifferent dependencies in your application will be lost. You should also\r\nset the `isolatedModules` TypeScript option if you plan to ever make use\r\nof this.\r\n\r\n##### happyPackMode *(boolean) (default=false)*\r\n\r\nEnables [`happypack`](https://github.com/amireh/happypack) compatibility mode. This implicitly sets `*transpileOnly*` to `true`. **WARNING!** Some errors will be silently ignored in `happypack` mode (`tsconfig.json` parsing errors, dependency resolution errors, etc.). \r\n\r\n##### logInfoToStdOut *(boolean) (default=false)*\r\n\r\nThis is important if you read from stdout or stderr and for proper error handling.\r\nThe default value ensures that you can read from stdout e.g. via pipes or you use webpack -j to generate json output.\r\n\r\n##### logLevel *(string) (default=info)*\r\n\r\nCan be `info`, `warn` or `error` which limits the log output to the specified log level.\r\nBeware of the fact that errors are written to stderr and everything else is written to stderr (or stdout if logInfoToStdOut is true).\r\n\r\n##### silent *(boolean) (default=false)*\r\n\r\nIf true, no console.log messages will be emitted. Note that most error\r\nmessages are emitted via webpack which is not affected by this flag.\r\n\r\n##### ignoreDiagnostics *(number[]) (default=[])*\r\n\r\nYou can squelch certain TypeScript errors by specifying an array of diagnostic\r\ncodes to ignore.\r\n\r\n##### compiler *(string) (default='typescript')*\r\n\r\nAllows use of TypeScript compilers other than the official one. Should be\r\nset to the NPM name of the compiler, eg [`ntypescript`](https://github.com/basarat/ntypescript).\r\n\r\n##### configFileName *(string) (default='tsconfig.json')*\r\n\r\nAllows you to specify a custom configuration file.\r\n\r\n##### visualStudioErrorFormat *(boolean) (default=false)*\r\n\r\nIf `true`, the TypeScript compiler output for an error or a warning, e.g. `(3,14): error TS4711: you did something very wrong`, in file `myFile` will instead be `myFile(3,14): error TS4711: you did something very wrong` (notice the file name at the beginning). This way Visual Studio will interpret this line and show any errors or warnings in the *error list*. This enables navigation to the file/line/column through double click.\r\n\r\n##### compilerOptions *(object) (default={})*\r\n\r\nAllows overriding TypeScript options. Should be specified in the same format\r\nas you would do for the `compilerOptions` property in tsconfig.json.\r\n\r\n##### instance *(string)*\r\n\r\nAdvanced option to force files to go through different instances of the\r\nTypeScript compiler. Can be used to force segregation between different parts\r\nof your code.\r\n\r\n#### entryFileIsJs *(boolean) (default=false)*\r\n\r\nTo be used in concert with the `allowJs` compiler option. If your entry file is JS then you'll need to set this option to true.  Please note that this is rather unusual and will generally not be necessary when using `allowJs`.\r\n\r\n#### appendTsSuffixTo *(RegExp[]) (default=[])*\r\nA list of regular expressions to be matched against filename. If filename matches one of the regular expressions, a `.ts` suffix will be appended to that filename.\r\n\r\nThis is useful for `*.vue` [file format](https://vuejs.org/v2/guide/single-file-components.html) for now. (Probably will benefit from the new single file format in the future.)\r\n\r\nExample:\r\n\r\nwebpack.config.js:\r\n\r\n```javascript\r\nmodule.exports = {\r\n    entry: './index.vue',\r\n    output: { filename: 'bundle.js' },\r\n    resolve: {\r\n        extensions: ['.ts', '.vue']\r\n    },\r\n    module: {\r\n        rules: [\r\n            { test: /\\.vue$/, loader: 'vue-loader' },\r\n            { test: /\\.ts$/, loader: 'ts-loader', options: { appendTsSuffixTo: [/\\.vue$/] } }\r\n        ]\r\n    } \r\n}\r\n```\r\n\r\nindex.vue\r\n\r\n```vue\r\n<template><p>hello {{msg}}</p></template>\r\n<script lang=\"ts\">\r\nexport default {\r\n  data(): Object {\r\n    return {\r\n      msg: \"world\"\r\n    }\r\n  },\r\n}\r\n</script>\r\n```\r\n\r\n\r\n### Loading other resources and code splitting\r\n\r\nLoading css and other resources is possible but you will need to make sure that\r\nyou have defined the `require` function in a [declaration file](https://www.typescriptlang.org/docs/handbook/writing-declaration-files.html).\r\n\r\n```typescript\r\ndeclare var require: {\r\n    <T>(path: string): T;\r\n    (paths: string[], callback: (...modules: any[]) => void): void;\r\n    ensure: (paths: string[], callback: (require: <T>(path: string) => T) => void) => void;\r\n};\r\n```\r\n\r\nThen you can simply require assets or chunks per the [webpack documentation](http://webpack.github.io/docs).\r\n\r\n```js\r\nrequire('!style!css!./style.css');\r\n```\r\n\r\nThe same basic process is required for code splitting. In this case, you `import` modules you need but you\r\ndon't directly use them. Instead you require them at [split points](http://webpack.github.io/docs/code-splitting.html#defining-a-split-point).\r\nSee [this example](test/comparison-tests/codeSplitting) and [this example](test/comparison-tests/es6codeSplitting) for more details.\r\n\r\n### Faster incremental builds\r\n\r\nAs your project becomes bigger and bigger, compilation time increases linearly. It's because typescript's semantic checker has to inspect all files on every rebuild. \r\n\r\nThe simple solution is to disable it by `transpileOnly: true` option but it leaves you without type checking.\r\n\r\nIf you don't want give up type checking, you can use [fork-ts-checker-webpack-plugin](https://github.com/Realytics/fork-ts-checker-webpack-plugin).\r\nIt runs checker on separate process, so your build is as fast as with `transpileOnly: true`. Also, it has several optimizations to make incremental type checking faster (AST cache, multiple workers).\r\n\r\nIf you'd like to see a simple setup take a look at [our simple example](examples/webpack2-fork-ts-checker/). For a more complex setup take a look at our [more involved example](examples\\fork-ts-checker-react-babel-karma-gulp).\r\n\r\n## License\r\n\r\nMIT License\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TypeStrong/ts-loader.git"
  },
  "scripts": {
    "build": "tsc --version && tsc --project \"./src\"",
    "comparison-tests": "npm link ./test/comparison-tests/testLib && node test/comparison-tests/run-tests.js",
    "comparison-tests-generate": "node test/comparison-tests/stub-new-version.js",
    "execution-tests": "node test/execution-tests/run-tests.js",
    "test": "node test/run-tests.js"
  },
  "version": "2.1.0"
}
